{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../button/button.component\";\nfunction SubscribeFormComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1, \"Invalid Email ID\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SubscribeFormComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.message, \" \");\n  }\n}\nfunction SubscribeFormComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.errrorMessage, \" \");\n  }\n}\nexport class SubscribeFormComponent {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.email = undefined;\n    this.message = '';\n    this.errrorMessage = '';\n  }\n  ngOnInit() {}\n  submit(form) {\n    this.httpClient.post('/api/subscriptionForm.', form.value).subscribe(data => {\n      if (data.message === 'SUCCESS') {\n        this.message = 'Thank You.';\n      }\n      console.log(data);\n    }, error => {\n      this.errrorMessage = error.error;\n      console.log(error);\n    });\n  }\n  static #_ = this.ɵfac = function SubscribeFormComponent_Factory(t) {\n    return new (t || SubscribeFormComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SubscribeFormComponent,\n    selectors: [[\"app-subscribe-form\"]],\n    decls: 7,\n    vars: 5,\n    consts: [[3, \"ngSubmit\"], [\"subscribeForm\", \"ngForm\"], [\"required\", \"\", \"pattern\", \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\", \"name\", \"email\", \"type\", \"email\", 1, \"mt-4\", \"w-full\", \"p-3\", \"border\", \"border-emerald-800\", \"border-opacity-20\", \"rounded-lg\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-red-600\", 4, \"ngIf\"], [\"name\", \"Subscribe Now\", \"size\", \"L\", \"shade\", \"D\", \"animation\", \"C\", 1, \"block\", \"mt-4\", 3, \"disabled\", \"click\"], [\"class\", \"text-green-600\", 4, \"ngIf\"], [1, \"text-red-600\"], [1, \"text-green-600\"]],\n    template: function SubscribeFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"form\", 0, 1);\n        i0.ɵɵlistener(\"ngSubmit\", function SubscribeFormComponent_Template_form_ngSubmit_0_listener() {\n          i0.ɵɵrestoreView(_r4);\n          const _r0 = i0.ɵɵreference(1);\n          return i0.ɵɵresetView(ctx.submit(_r0));\n        });\n        i0.ɵɵelementStart(2, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function SubscribeFormComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, SubscribeFormComponent_span_3_Template, 2, 0, \"span\", 3);\n        i0.ɵɵelementStart(4, \"app-button\", 4);\n        i0.ɵɵlistener(\"click\", function SubscribeFormComponent_Template_app_button_click_4_listener() {\n          return ctx.ng;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, SubscribeFormComponent_span_5_Template, 2, 1, \"span\", 5);\n        i0.ɵɵtemplate(6, SubscribeFormComponent_span_6_Template, 2, 1, \"span\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.email);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", _r0.controls[\"email\"].dirty && !_r0.controls[\"email\"].valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !_r0.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message != \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errrorMessage != \"\");\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.PatternValidator, i3.NgModel, i3.NgForm, i4.ButtonComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r2","message","ctx_r3","errrorMessage","SubscribeFormComponent","constructor","httpClient","email","undefined","ngOnInit","submit","form","post","value","subscribe","data","console","log","error","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","SubscribeFormComponent_Template","rf","ctx","ɵɵlistener","SubscribeFormComponent_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r4","_r0","ɵɵreference","ɵɵresetView","SubscribeFormComponent_Template_input_ngModelChange_2_listener","$event","ɵɵtemplate","SubscribeFormComponent_span_3_Template","SubscribeFormComponent_Template_app_button_click_4_listener","ng","SubscribeFormComponent_span_5_Template","SubscribeFormComponent_span_6_Template","ɵɵproperty","controls","dirty","valid"],"sources":["E:\\Angular-Project\\src\\app\\shared\\subscribe-form\\subscribe-form.component.ts","E:\\Angular-Project\\src\\app\\shared\\subscribe-form\\subscribe-form.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-subscribe-form',\n  templateUrl: './subscribe-form.component.html',\n  styleUrls: ['./subscribe-form.component.css'],\n})\nexport class SubscribeFormComponent implements OnInit {\n  email: string | undefined = undefined;\n  message: string = '';\n  errrorMessage: string = '';\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit(): void {}\n\n  submit(form: NgForm) {\n    this.httpClient.post('/api/subscriptionForm.', form.value).subscribe(\n      (data: any) => {\n        if (data.message === 'SUCCESS') {\n          this.message = 'Thank You.';\n        }\n        console.log(data)\n      },\n      (error) => {\n        this.errrorMessage = error.error;\n        console.log(error)\n      }\n    );\n  }\n}\n","<form #subscribeForm=\"ngForm\" (ngSubmit)=\"submit(subscribeForm)\">\n\n  <input required [(ngModel)]=\"email\" pattern=\"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\" name=\"email\" type=\"email\" class=\"mt-4 w-full p-3 border border-emerald-800 border-opacity-20 rounded-lg\">\n\n  <span class=\"text-red-600\" *ngIf=\"subscribeForm.controls['email'].dirty && !subscribeForm.controls['email'].valid\">Invalid Email ID</span>\n\n  <app-button [disabled]=\"!subscribeForm.valid\" class=\"block mt-4\" name=\"Subscribe Now\" size=\"L\" shade=\"D\" animation=\"C\" (click)=\"ng\"></app-button>\n\n  <span *ngIf=\"this.message!=''\" class=\"text-green-600\">\n      {{this.message}}\n  </span>\n\n  <span *ngIf=\"this.errrorMessage!=''\" class=\"text-red-600\">\n      {{this.errrorMessage}}\n  </span>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}