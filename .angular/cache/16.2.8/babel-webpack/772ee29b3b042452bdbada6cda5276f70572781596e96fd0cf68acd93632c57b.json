{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["E:\\Angular-Project\\src\\app\\shared\\slider\\slider.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, OnChanges, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { Feedback } from 'src/app/models/feedback.model';\nimport { Client } from 'src/app/models/client.model';\nimport { SlideConfig } from 'src/app/models/slide-config.model';\nimport { }\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.css']\n})\nexport class SliderComponent implements OnInit, AfterViewInit {\n\n  @Input('items')\n  items: string[] | Feedback[] | Client[] = [];\n\n  dots: number[] = [];\n  activeSlideID = 1;\n\n  @ContentChild('template')\n  template: TemplateRef<any> | undefined;\n\n  @Output('select')\n  onSelect: EventEmitter<string> = new EventEmitter<string>()\n\n  @ViewChild('slideContainer')\n  slideContainer!: ElementRef;\n\n  @Input('slideConfig')\n  slideConfig = new SlideConfig();\n\n  sliderContainerWidth = 0;\n  slideWidth = 0;\n  elementsToShow = 1;\n  sliderWidth = 0;\n\n  sliderMarginLeft = 0;\n\n  isSlidesOver = false;\n\n  @HostListener('window:resize', ['$event'])\n  onScreenResize() {\n    this.setUpSlider()\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n    console.log(this.dots)\n  }\n\n  getItems() {\n    return this.items as any[]\n  }\n\n  ngAfterViewInit(): void {\n    this.setUpSlider()\n  }\n\n  setUpSlider() {\n    if (window.innerWidth < 500)\n      this.elementsToShow = this.slideConfig.breakpoints.sm;\n    else if (window.innerWidth < 900)\n      this.elementsToShow = this.slideConfig.breakpoints.md;\n    else if (window.innerWidth < 1300)\n      this.elementsToShow = this.slideConfig.breakpoints.lg;\n    else\n      this.elementsToShow = this.slideConfig.breakpoints.xl;\n\n    if (this.items.length < this.elementsToShow) {\n      this.elementsToShow = this.items.length;\n    }\n\n    this.dots = Array(this.items.length - this.elementsToShow + 1);\n\n    let container = this.slideContainer.nativeElement as HTMLElement;\n\n    this.sliderContainerWidth = container.clientWidth;\n    this.slideWidth = this.sliderContainerWidth / this.elementsToShow;\n    this.sliderWidth = this.slideWidth * this.items.length;\n\n    // console.log(this.sliderContainerWidth)\n    // console.log(this.sliderWidth)\n    // console.log(this.slideWidth)\n\n    if(this.slideConfig.autoPlay) this.autoPlay()\n  }\n\n  prev() {\n    console.log(this.sliderMarginLeft)\n    if (this.sliderMarginLeft === 0) {\n      return\n    }\n    this.activeSlideID--;\n    this.sliderMarginLeft = this.sliderMarginLeft + this.slideWidth;\n  }\n\n  next() {\n    const notShowingElementsCount = this.items.length - this.elementsToShow;\n    const possibleMargin = -(notShowingElementsCount * this.slideWidth);\n    if (this.sliderMarginLeft <= possibleMargin) {\n      this.isSlidesOver = true;\n      return\n    }\n    this.isSlidesOver = false;\n    this.activeSlideID++;\n    this.sliderMarginLeft = this.sliderMarginLeft - this.slideWidth;\n  }\n\n  move(slideID: number) {\n    console.log(\"Slide ID\" + slideID)\n    console.log(\"activeSlideID\" + this.activeSlideID)\n    let difference = slideID - this.activeSlideID;\n    if (difference > 0) {\n      // Next\n      for (let index = 0; index < difference; index++) {\n        this.next()\n      }\n    } else if (difference < 0) {\n      //prev\n      for (let index = 0; index < Math.abs(difference); index++) {\n        this.prev()\n      }\n    }\n  }\n\n  autoPlay(){\n    setTimeout(() => {\n      if(this.isSlidesOver === true){\n        this.sliderMarginLeft = this.slideWidth;\n      }\n      this.next()\n      this.autoPlay()\n    }, 1000);\n  }\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}