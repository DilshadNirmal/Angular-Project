{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"template\"];\nconst _c1 = [\"slideContainer\"];\n// import { Client } from 'src/app/models/client.model';\n// import { Course } from 'src/app/models/course.model';\n// import { Feedback } from 'src/app/models/feedback.model';\n// import { SlideConfig } from 'src/app/models/slide-config.model';\nexport class SliderComponent {\n  // @HostListener('window:resize', ['$event'])\n  // onScreenResize() {\n  //   this.setUpSlider()\n  // }\n  constructor() {\n    // @Input('items')\n    // items: string[] | Feedback[] | Client[] = [];\n    this.dots = [];\n    this.activeSlideID = 1;\n    this.onSelect = new EventEmitter();\n    // @Input('slideConfig')\n    // slideConfig = new SlideConfig();\n    this.sliderContainerWidth = 0;\n    this.slideWidth = 0;\n    this.elementsToShow = 1;\n    this.sliderWidth = 0;\n    this.sliderMarginLeft = 0;\n    this.isSlidesOver = false;\n  }\n  ngOnInit() {\n    console.log(this.dots);\n  }\n  getItems() {\n    return this.items;\n  }\n  ngAfterViewInit() {\n    this.setUpSlider();\n  }\n  // setUpSlider() {\n  //   if (window.innerWidth < 500)\n  //     this.elementsToShow = this.slideConfig.breakpoints.sm;\n  //   else if (window.innerWidth < 900)\n  //     this.elementsToShow = this.slideConfig.breakpoints.md;\n  //   else if (window.innerWidth < 1300)\n  //     this.elementsToShow = this.slideConfig.breakpoints.lg;\n  //   else\n  //     this.elementsToShow = this.slideConfig.breakpoints.xl;\n  //   if (this.items.length < this.elementsToShow) {\n  //     this.elementsToShow = this.items.length;\n  //   }\n  //   this.dots = Array(this.items.length - this.elementsToShow + 1);\n  //   let container = this.slideContainer.nativeElement as HTMLElement;\n  //   this.sliderContainerWidth = container.clientWidth;\n  //   this.slideWidth = this.sliderContainerWidth / this.elementsToShow;\n  //   this.sliderWidth = this.slideWidth * this.items.length;\n  //   // console.log(this.sliderContainerWidth)\n  //   // console.log(this.sliderWidth)\n  //   // console.log(this.slideWidth)\n  //   if(this.slideConfig.autoPlay) this.autoPlay()\n  // }\n  prev() {\n    console.log(this.sliderMarginLeft);\n    if (this.sliderMarginLeft === 0) {\n      return;\n    }\n    this.activeSlideID--;\n    this.sliderMarginLeft = this.sliderMarginLeft + this.slideWidth;\n  }\n  static #_ = this.ɵfac = function SliderComponent_Factory(t) {\n    return new (t || SliderComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SliderComponent,\n    selectors: [[\"app-slider\"]],\n    contentQueries: function SliderComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      }\n    },\n    viewQuery: function SliderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slideContainer = _t.first);\n      }\n    },\n    outputs: {\n      onSelect: \"select\"\n    },\n    decls: 2,\n    vars: 0,\n    template: function SliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"slider works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","SliderComponent","constructor","dots","activeSlideID","onSelect","sliderContainerWidth","slideWidth","elementsToShow","sliderWidth","sliderMarginLeft","isSlidesOver","ngOnInit","console","log","getItems","items","ngAfterViewInit","setUpSlider","prev","_","_2","selectors","contentQueries","SliderComponent_ContentQueries","rf","ctx","dirIndex","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["E:\\Angular-Project\\src\\app\\shared\\slider\\slider.component.ts","E:\\Angular-Project\\src\\app\\shared\\slider\\slider.component.html"],"sourcesContent":["import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, OnChanges, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\n// import { Client } from 'src/app/models/client.model';\n// import { Course } from 'src/app/models/course.model';\n// import { Feedback } from 'src/app/models/feedback.model';\n// import { SlideConfig } from 'src/app/models/slide-config.model';\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.css']\n})\nexport class SliderComponent implements OnInit, AfterViewInit {\n\n  // @Input('items')\n  // items: string[] | Feedback[] | Client[] = [];\n\n  dots: number[] = [];\n  activeSlideID = 1;\n\n  @ContentChild('template')\n  template: TemplateRef<any> | undefined;\n\n  @Output('select')\n  onSelect: EventEmitter<string> = new EventEmitter<string>()\n\n  @ViewChild('slideContainer')\n  slideContainer!: ElementRef;\n\n  // @Input('slideConfig')\n  // slideConfig = new SlideConfig();\n\n  sliderContainerWidth = 0;\n  slideWidth = 0;\n  elementsToShow = 1;\n  sliderWidth = 0;\n\n  sliderMarginLeft = 0;\n\n  isSlidesOver = false;\n\n  // @HostListener('window:resize', ['$event'])\n  // onScreenResize() {\n  //   this.setUpSlider()\n  // }\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n    console.log(this.dots)\n  }\n\n  getItems() {\n    return this.items as any[]\n  }\n\n  ngAfterViewInit(): void {\n    this.setUpSlider()\n  }\n\n  // setUpSlider() {\n  //   if (window.innerWidth < 500)\n  //     this.elementsToShow = this.slideConfig.breakpoints.sm;\n  //   else if (window.innerWidth < 900)\n  //     this.elementsToShow = this.slideConfig.breakpoints.md;\n  //   else if (window.innerWidth < 1300)\n  //     this.elementsToShow = this.slideConfig.breakpoints.lg;\n  //   else\n  //     this.elementsToShow = this.slideConfig.breakpoints.xl;\n\n  //   if (this.items.length < this.elementsToShow) {\n  //     this.elementsToShow = this.items.length;\n  //   }\n\n  //   this.dots = Array(this.items.length - this.elementsToShow + 1);\n\n  //   let container = this.slideContainer.nativeElement as HTMLElement;\n\n  //   this.sliderContainerWidth = container.clientWidth;\n  //   this.slideWidth = this.sliderContainerWidth / this.elementsToShow;\n  //   this.sliderWidth = this.slideWidth * this.items.length;\n\n  //   // console.log(this.sliderContainerWidth)\n  //   // console.log(this.sliderWidth)\n  //   // console.log(this.slideWidth)\n\n  //   if(this.slideConfig.autoPlay) this.autoPlay()\n  // }\n\n  prev() {\n    console.log(this.sliderMarginLeft)\n    if (this.sliderMarginLeft === 0) {\n      return\n    }\n    this.activeSlideID--;\n    this.sliderMarginLeft = this.sliderMarginLeft + this.slideWidth;\n  }\n\n  // next() {\n  //   const notShowingElementsCount = this.items.length - this.elementsToShow;\n  //   const possibleMargin = -(notShowingElementsCount * this.slideWidth);\n  //   if (this.sliderMarginLeft <= possibleMargin) {\n  //     this.isSlidesOver = true;\n  //     return\n  //   }\n  //   this.isSlidesOver = false;\n  //   this.activeSlideID++;\n  //   this.sliderMarginLeft = this.sliderMarginLeft - this.slideWidth;\n  // }\n\n  // move(slideID: number) {\n  //   console.log(\"Slide ID\" + slideID)\n  //   console.log(\"activeSlideID\" + this.activeSlideID)\n  //   let difference = slideID - this.activeSlideID;\n  //   if (difference > 0) {\n  //     // Next\n  //     for (let index = 0; index < difference; index++) {\n  //       this.next()\n  //     }\n  //   } else if (difference < 0) {\n  //     //prev\n  //     for (let index = 0; index < Math.abs(difference); index++) {\n  //       this.prev()\n  //     }\n  //   }\n  // }\n\n//   autoPlay(){\n//     setTimeout(() => {\n//       if(this.isSlidesOver === true){\n//         this.sliderMarginLeft = this.slideWidth;\n//       }\n//       this.next()\n//       this.autoPlay()\n//     }, 1000);\n//   }\n// }\n","<p>slider works!</p>\n"],"mappings":"AAAA,SAA6DA,YAAY,QAAgF,eAAe;;;;AACxK;AACA;AACA;AACA;AAOA,OAAM,MAAOC,eAAe;EA6B1B;EACA;EACA;EACA;EAEAC,YAAA;IAhCA;IACA;IAEA,KAAAC,IAAI,GAAa,EAAE;IACnB,KAAAC,aAAa,GAAG,CAAC;IAMjB,KAAAC,QAAQ,GAAyB,IAAIL,YAAY,EAAU;IAK3D;IACA;IAEA,KAAAM,oBAAoB,GAAG,CAAC;IACxB,KAAAC,UAAU,GAAG,CAAC;IACd,KAAAC,cAAc,GAAG,CAAC;IAClB,KAAAC,WAAW,GAAG,CAAC;IAEf,KAAAC,gBAAgB,GAAG,CAAC;IAEpB,KAAAC,YAAY,GAAG,KAAK;EAOJ;EAEhBC,QAAQA,CAAA;IAENC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,IAAI,CAAC;EACxB;EAEAY,QAAQA,CAAA;IACN,OAAO,IAAI,CAACC,KAAc;EAC5B;EAEAC,eAAeA,CAAA;IACb,IAAI,CAACC,WAAW,EAAE;EACpB;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EAEAC,IAAIA,CAAA;IACFN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,gBAAgB,CAAC;IAClC,IAAI,IAAI,CAACA,gBAAgB,KAAK,CAAC,EAAE;MAC/B;;IAEF,IAAI,CAACN,aAAa,EAAE;IACpB,IAAI,CAACM,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAACH,UAAU;EACjE;EAAC,QAAAa,CAAA,G;qBArFUnB,eAAe;EAAA;EAAA,QAAAoB,EAAA,G;UAAfpB,eAAe;IAAAqB,SAAA;IAAAC,cAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA,EAAAC,QAAA;MAAA,IAAAF,EAAA;;;;;;;;;;;;;;;;;;;;;;;;QCX5BG,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,oBAAa;QAAAF,EAAA,CAAAG,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}